@model List<OrusFinancas.Models.ViewModels.GastosPorCategoriaViewModel>

@{
    ViewData["Title"] = "Gastos por Categoria";
    decimal totalGeral = Model?.Sum(x => x.Total) ?? 0;
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1 class="display-6 fw-bold text-primary mb-1">
            <i class="bi bi-pie-chart-fill me-2"></i>Gastos por Categoria
        </h1>
        <p class="text-muted mb-0">Análise detalhada dos seus gastos - @ViewBag.MesNome</p>
    </div>
</div>

<div class="card mb-4 shadow-sm border-0">
    <div class="card-header bg-light">
        <h5 class="card-title mb-0">
            <i class="bi bi-funnel"></i> Filtros
        </h5>
    </div>
    <div class="card-body">
        <form method="get" class="row g-3">
            <div class="col-md-4">
                <label for="mes" class="form-label">Mês</label>
                <select name="mes" id="mes" class="form-select">
                    @for (int i = 1; i <= 12; i++)
                    {
                        var mesNome = new DateTime(2000, i, 1).ToString("MMMM", new System.Globalization.CultureInfo("pt-BR"));
                        <option value="@i" selected="@(ViewBag.Mes == i)">
                            @mesNome
                        </option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label for="ano" class="form-label">Ano</label>
                <select name="ano" id="ano" class="form-select">
                    @for (int ano = DateTime.Now.Year; ano >= DateTime.Now.Year - 5; ano--)
                    {
                        <option value="@ano" selected="@(ViewBag.Ano == ano)">@ano</option>
                    }
                </select>
            </div>
            <div class="col-md-4">
                <label>&nbsp;</label>
                <button type="submit" class="btn btn-primary d-block w-100">
                    <i class="bi bi-arrow-clockwise"></i> Atualizar Relatório
                </button>
            </div>
        </form>
    </div>
</div>

@if (Model != null && Model.Any())
{
    <div class="row mb-4">
        <div class="col-lg-5">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-primary text-white">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-pie-chart"></i> Distribuição Visual
                    </h5>
                </div>
                <div class="card-body d-flex align-items-center justify-content-center">
                    <div style="max-width: 350px; width: 100%;">
                        <canvas id="graficoGastos"></canvas>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-lg-7">
            <div class="card shadow-sm border-0 h-100">
                <div class="card-header bg-secondary text-white">
                    <h5 class="card-title mb-0">
                        <i class="bi bi-list-check"></i> Detalhamento por Categoria
                    </h5>
                </div>
                <div class="card-body">
                    <div class="alert alert-info border-0 mb-3">
                        <div class="d-flex align-items-center">
                            <i class="bi bi-calculator-fill me-3 fs-4"></i>
                            <div>
                                <strong>Total de gastos no período:</strong><br>
                                <span class="fs-4 text-danger fw-bold">
                                    @totalGeral.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
                                </span>
                            </div>
                        </div>
                    </div>
                    
                    <div class="list-group">
                        @foreach (var item in Model)
                        {
                            var percentual = totalGeral > 0 ? (item.Total / totalGeral) * 100 : 0;
                            var progressBarClass = percentual > 30 ? "bg-danger" : percentual > 20 ? "bg-warning" : percentual > 10 ? "bg-info" : "bg-success";
                            var badgeClass = percentual >= 30 ? "bg-danger" : percentual >= 20 ? "bg-warning" : "bg-primary";
                            
                            <div class="list-group-item border-0 border-bottom py-3">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <div class="d-flex align-items-center flex-grow-1">
                                        <i class="bi bi-tag-fill text-primary me-2"></i>
                                        <span class="fw-semibold">@item.Categoria</span>
                                    </div>
                                    <div class="text-end ms-3">
                                        <div class="text-danger fw-bold">
                                            @item.Total.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
                                        </div>
                                        <span class="badge @badgeClass mt-1">
                                            @percentual.ToString("F1")%
                                        </span>
                                    </div>
                                </div>
                                <div class="progress" style="height: 10px;">
                                    <div class="progress-bar @progressBarClass progress-bar-striped" 
                                         role="progressbar" 
                                         style="width: @Math.Min(percentual, 100)%;" 
                                         aria-valuenow="@percentual" 
                                         aria-valuemin="0" 
                                         aria-valuemax="100">
                                    </div>
                                </div>
                                @if (percentual >= 30)
                                {
                                    <small class="text-danger mt-1 d-block">
                                        <i class="bi bi-exclamation-triangle"></i> Categoria com maior impacto no orçamento
                                    </small>
                                }
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="card shadow-sm border-0">
        <div class="card-header bg-light">
            <h5 class="card-title mb-0">
                <i class="bi bi-table"></i> Tabela Resumida
            </h5>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-hover table-striped">
                    <thead class="table-dark">
                        <tr>
                            <th><i class="bi bi-hash"></i> #</th>
                            <th><i class="bi bi-tag"></i> Categoria</th>
                            <th class="text-end"><i class="bi bi-currency-dollar"></i> Total Gasto</th>
                            <th class="text-end"><i class="bi bi-percent"></i> Percentual</th>
                            <th class="text-center"><i class="bi bi-graph-up"></i> Impacto</th>
                        </tr>
                    </thead>
                    <tbody>
                        @{
                            int contador = 1;
                        }
                        @foreach (var item in Model)
                        {
                            var percentual = totalGeral > 0 ? (item.Total / totalGeral) * 100 : 0;
                            var impactoIcon = percentual >= 30 ? "bi-emoji-frown text-danger" : 
                                            percentual >= 20 ? "bi-emoji-neutral text-warning" : 
                                            "bi-emoji-smile text-success";
                            
                            <tr>
                                <td class="fw-bold">@contador</td>
                                <td>
                                    <i class="bi bi-tag-fill text-primary me-1"></i>
                                    @item.Categoria
                                </td>
                                <td class="text-end fw-bold text-danger">
                                    @item.Total.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
                                </td>
                                <td class="text-end">
                                    <span class="badge @(percentual >= 30 ? "bg-danger" : percentual >= 20 ? "bg-warning" : "bg-primary")">
                                        @percentual.ToString("F1")%
                                    </span>
                                </td>
                                <td class="text-center">
                                    <i class="bi @impactoIcon fs-5"></i>
                                </td>
                            </tr>
                            contador++;
                        }
                    </tbody>
                    <tfoot class="table-secondary">
                        <tr class="fw-bold">
                            <td colspan="2">
                                <i class="bi bi-calculator"></i> Total Geral
                            </td>
                            <td class="text-end text-danger fs-5">
                                @totalGeral.ToString("C", System.Globalization.CultureInfo.GetCultureInfo("pt-BR"))
                            </td>
                            <td class="text-end">
                                <span class="badge bg-dark">100%</span>
                            </td>
                            <td></td>
                        </tr>
                    </tfoot>
                </table>
            </div>
        </div>
    </div>
    
    <div class="mt-3 text-center">
        <a asp-controller="Categoria" asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Voltar para Categorias
        </a>
        <a asp-controller="Orcamento" asp-action="Index" class="btn btn-outline-primary">
            <i class="bi bi-pie-chart"></i> Gerenciar Orçamentos
        </a>
    </div>
}
else
{
    <div class="card shadow-sm border-0">
        <div class="card-body text-center py-5">
            <i class="bi bi-inbox display-1 text-muted mb-3"></i>
            <h4>Nenhuma despesa encontrada</h4>
            <p class="text-muted mb-4">Não há gastos registrados para o período selecionado.</p>
            <div>
                <a asp-controller="Transacao" asp-action="Create" class="btn btn-success">
                    <i class="bi bi-plus-circle"></i> Registrar Nova Despesa
                </a>
                <a asp-controller="Categoria" asp-action="Index" class="btn btn-outline-secondary ms-2">
                    <i class="bi bi-arrow-left"></i> Voltar para Categorias
                </a>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    @if (Model != null && Model.Any())
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                const ctx = document.getElementById('graficoGastos').getContext('2d');
                
                // Cores mais vibrantes e variadas
                const backgroundColors = [
                    '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', 
                    '#9966FF', '#FF9F40', '#FF6384', '#C9CBCF',
                    '#E7E9ED', '#36A2EB', '#FF6384', '#4BC0C0'
                ];
                
                const borderColors = [
                    '#FF4069', '#2A8FD6', '#FFB93E', '#3BAB9F',
                    '#7F4FE0', '#FF8A28', '#FF4069', '#B0B3BA',
                    '#CED0D6', '#2A8FD6', '#FF4069', '#3BAB9F'
                ];
                
                const myChart = new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: [@Html.Raw(string.Join(",", Model.Select(x => $"'{x.Categoria}'")))],
                        datasets: [{
                            data: [@Html.Raw(string.Join(",", Model.Select(x => x.Total)))],
                            backgroundColor: backgroundColors,
                            borderColor: borderColors,
                            borderWidth: 2,
                            hoverOffset: 10
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: true,
                        plugins: {
                            legend: {
                                position: 'bottom',
                                labels: {
                                    padding: 15,
                                    font: {
                                        size: 12
                                    },
                                    usePointStyle: true
                                }
                            },
                            tooltip: {
                                backgroundColor: 'rgba(0,0,0,0.8)',
                                padding: 12,
                                titleFont: {
                                    size: 14,
                                    weight: 'bold'
                                },
                                bodyFont: {
                                    size: 13
                                },
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.parsed || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((value / total) * 100).toFixed(1);
                                        return label + ': R$ ' + value.toLocaleString('pt-BR', {minimumFractionDigits: 2}) + ' (' + percentage + '%)';
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Tooltips
                var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                    return new bootstrap.Tooltip(tooltipTriggerEl);
                });
            });
        </script>
    }
}